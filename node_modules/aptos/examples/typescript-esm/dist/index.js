/* eslint-disable no-console */
import { AptosClient, AptosAccount, FaucetClient, BCS, TxnBuilderTypes } from "aptos";
import assert from "assert";
const NODE_URL = process.env.APTOS_NODE_URL || "https://fullnode.devnet.aptoslabs.com";
const FAUCET_URL = process.env.APTOS_FAUCET_URL || "https://faucet.devnet.aptoslabs.com";
export const aptosCoinStore = "0x1::coin::CoinStore<0x1::aptos_coin::AptosCoin>";
const { AccountAddress, TypeTagStruct, TypeTagVector, TypeTagU8, EntryFunction, StructTag, TransactionPayloadEntryFunction, RawTransaction, ChainId, } = TxnBuilderTypes;
/**
 * This code example demonstrates the process of moving test coins from one account to another.
 */
(async () => {
    const client = new AptosClient(NODE_URL);
    const faucetClient = new FaucetClient(NODE_URL, FAUCET_URL);
    // Generates key pair for a new account
    const account1 = new AptosAccount();
    console.log(">>>>");
    await faucetClient.fundAccount(account1.address(), 100000);
    console.log("====");
    let resources = await client.getAccountResources(account1.address());
    let accountResource = resources.find((r) => r.type === aptosCoinStore);
    let balance = parseInt((accountResource?.data).coin.value);
    assert(balance === 100000);
    console.log(`account2 coins: ${balance}. Should be 100000!`);
    const account2 = new AptosAccount();
    // Creates the second account and fund the account with 0 AptosCoin
    await faucetClient.fundAccount(account2.address(), 0);
    resources = await client.getAccountResources(account2.address());
    accountResource = resources.find((r) => r.type === aptosCoinStore);
    balance = parseInt((accountResource?.data).coin.value);
    assert(balance === 0);
    console.log(`account2 coins: ${balance}. Should be 0!`);
    const token = new TypeTagStruct(StructTag.fromString("0x1::aptos_coin::AptosCoin"));
    let typeTag = new TypeTagVector(new TypeTagU8());
    for (let i = 0; i < 120; i += 1) {
        typeTag = new TypeTagVector(typeTag);
    }
    // TS SDK support 3 types of transaction payloads: `EntryFunction`, `Script` and `Module`.
    // See https://aptos-labs.github.io/ts-sdk-doc/ for the details.
    const entryFunctionPayload = new TransactionPayloadEntryFunction(EntryFunction.natural(
    // Fully qualified module name, `AccountAddress::ModuleName`
    "0x1::coin", 
    // Module function
    "transfer", 
    // The coin type to transfer
    [typeTag], 
    // Arguments for function `transfer`: receiver account address and amount to transfer
    [BCS.bcsToBytes(AccountAddress.fromHex(account2.address())), BCS.bcsSerializeUint64(717)]));
    const [{ sequence_number: sequenceNumber }, chainId] = await Promise.all([
        client.getAccount(account1.address()),
        client.getChainId(),
    ]);
    // See class definiton here
    // https://aptos-labs.github.io/ts-sdk-doc/classes/TxnBuilderTypes.RawTransaction.html#constructor.
    const rawTxn = new RawTransaction(
    // Transaction sender account address
    AccountAddress.fromHex(account1.address()), BigInt(sequenceNumber), entryFunctionPayload, 
    // Max gas unit to spend
    BigInt(2000), 
    // Gas price per unit
    BigInt(1), 
    // Expiration timestamp. Transaction is discarded if it is not executed within 10 seconds from now.
    BigInt(Math.floor(Date.now() / 1000) + 10), new ChainId(chainId));
    // Sign the raw transaction with account1's private key
    const bcsTxn = AptosClient.generateBCSTransaction(account1, rawTxn);
    const transactionRes = await client.submitSignedBCSTransaction(bcsTxn);
    console.log(transactionRes.hash);
    await client.waitForTransaction(transactionRes.hash);
    resources = await client.getAccountResources(account2.address());
    accountResource = resources.find((r) => r.type === aptosCoinStore);
    balance = parseInt((accountResource?.data).coin.value);
    assert(balance === 717);
    console.log(`account2 coins: ${balance}. Should be 717!`);
})();
//# sourceMappingURL=index.js.map